link del ejemplo: https://github.com/OpenWebinarsNet/Fundamentos-de-Angular-15/blob/main/src/app/components/avatar/avatar.component.ts
comandos comunes:
ng s --> iniciar servidor
ng build --> compilar proyecto
q+enter --> quitar
ng g c nombreComponente  --> crear componente
ng m nombreModulo --> generar modulo


Componentes:
-deben estar listados en app.component.ts
-se usan en el app.component.html usando nomenclatura <app-nombreDelComponente></app-nombreDelComponente>

-para pasar variables de componente padre a componente hijo:
  -crear var inicializada en componente hijo ts (ej.  @Input() title = ''; )
  -crear var inicializada en componente padre ts (ej. varTitleDelHeader = 'Mikaru Emcora Portfolio'; )
  -igualar con nomenclatura en componente padre html (ej: <app-title [varTitle]="varTitleDelHeader"></app-title>)
  -usar variable en componente hijo html (ej: <h1>{{varTitle}}</h1> )

-al reves, en este caso ejemplo con event emitter:
  -crear var inicializada en componente hijo ts (ej: @Output() dataFromChild = new EventEmitter(); )
  -meter en una funcion de ciclo la variable
  -crear en el componente padre ts una funcion que haga algo, en este caso simplemente mostrar el evento
  -igualar con nomenclatura en componente padre la var del componente hijo a la funcion del componente padre (ej: (dataFromChild)="onDataCheck($event)" )


templates:
-se puede hacer inline en el componente ts (sin ejemplo porque no es muy util)
-se usa html y css normal
-puedes usar los tags de los componentes dentro de otros tags de componentes
-el componente css solo afecta al componente en cuestion, aunque tenga otro componente dentro donde la regla podria aplicarse
-el css global está en styles.css, no en app module css
-puedes hacer css inline en @component del componente ts (sin ejemplo)
-puedes hacer una var con un array clave-valor de strings en el @componente (sin ejemplo)
-se imprime una var con {{nombreVar}} en el html
-se imprime un array con: {{nombreArray|json}}
-se imprime un valor de un array con: {{nombreArray.clave}} 

Data Binding, ejemplo en product-card de todo

property binding: para propiedades html
  -se hace en el comonente html
event binding: para adjudicar eventos a elementos html
  -se crean las funciones en el componente ts y se adjudican en el componente html
two way data binding: mezcla entre property y event binding
  -importar FormsModule en ap module ts
  -permite capturar contenido del input de un form
  -como propiedad de un input en el html usando [(ngModel)]=""
  -

  Pipe: para presentar al user datos sin transformar el dato original
  -en la documentacion oficial hay builtin pipes
  -se usan así: <h1>{{product.price | number | currency}}</h1>
  -se pueden concatenar y formatear (mirar documentacion)

  ----a partir de aqui ya no seguimos el codigo de ejemplo--

  directivas: componentes, de atributo, estructurales
  -de atributo, en el template del componente ts
    -ngClass:parametrizan clases, y no es excluyente de poner otras por defecto normales
     -ngStyle: se maneja el estilo con logica, ejemplo en avatar y header
     -ngModel 
-estructurales:
  -nglf, ngSwitch, ngFor, etc
  en app.component.ts tendriamos el array de productos en bbdd para un ejemplo rapido
  -en el export de la clase on init metes el array en una variable
  -notacion para bucles de componentes:
      en la etiqueta html que quieras repetir metes
      *ngFor="let product of products"
  -en el componente hijo creo var y desde el padre app.component.ts referencio a la var del bucle
   en la etiqueta del componente en el app html referencio a la var que cree
      <app-product-card>[product]="product"</app-product-card>
  primer product es el del for y el segundo el del componente ts
  se alojan las directivas en tags <ng-container, una para cada una>
  se pueden usar switch e if/else, y hay muchas mas en la documentacion oficial

  Modulos:
  modulos contienen componentes principales, con componentes pequeños dentro agrupados
  los modulos importan modulos
  se declaran en el modulo ts declarations los componentes
  el modulo de componentes.module.ts debe contener importados y declarados los componentes
  para usar componentes en app.component.html se deben exportar componentes en el components.module.ts

  hacer pages.module.ts y meterle componentes dentro
  dejar solo el header en el app.component.html
  importar pagesModule en app.module.ts y exportar en el pages.module.ts los componentes que se quieran usar en app.component.html


  routing:
